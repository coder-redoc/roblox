package leetcode.union;

import java.util.*;

public class MinimizeMalwareSpread {
    class Union{
        int[] father, size;
        public Union(int n) {
            this.father = new int[n];
            this.size = new int[n];
            for (int i = 0; i < n; i++) {
                father[i] = i;
                size[i] = 1;
            }
        }

        public int find(int a) {
            while (a != father[a]) {
                a = father[a];
            }
            return a;
        }

        public void union(int a, int b) {
            int fa = find(a);
            int fb = find(b);
            if (fa == fb) {
                return;
            }
            int faSize = size[fa];
            int fbSize = size[fb];
            if (faSize > fbSize) {
                father[fb] = fa;
                size[fa] += fbSize;
            } else {
                father[fa] = fb;
                size[fb] += faSize;
            }
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        Union union = new Union(n);
        for (int i = 0; i < n; ++i){
            for (int j = i+1; j < n; ++j){
                if (graph[i][j] == 1){
                    union.union(i, j);
                }
            }
        }
        int[] countMalware = new int[n];
        for (int a : initial) {
            int fa = union.find(a);
            countMalware[fa]++;
        }
        int size = -1, node = -1;
        for (int a : initial) {
            int fa = union.find(a);
            if (countMalware[fa] == 1) { // only need remove one
                if (union.size[fa] > size) {
                    size = union.size[fa];
                    node = a;
                } else if (union.size[fa] == size && node > a) {
                    node = a;
                }
            }
        }
        if (node == -1) {
            node = Integer.MAX_VALUE;
            for (int a : initial)
                node = Math.min(node, a);
        }
        return node;
    }
}
